name: Deploy Test #Name of the Workflow

on: #Name of the GitHub event that triggers the workflow
  push: #On Push Event We need to take action
    branches: #Now we need to specify the branch name
      - main

jobs: #Workflow run is made up of one or more jobs
  deploy_lambda:
    runs-on: ubuntu-latest #Through which Server OS we need to Work (type of machine to run the job on)
    steps:
      #Using versioned actions
      - uses: actions/checkout@v2 # --> Reference a specific version
      - uses: actions/setup-node@v2 # --> To Setup the Server With Node Env
        with:
          node-version: "14" #--> Specify the Version of the Node

      - name: npm install
        env:
          CI: true
        run: |
          npm ci

      - name: Set Terraform Log Level
        run: echo "TF_LOG=DEBUG" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1 #--> Setup the Credential for the AWS cli
        with:
          # Created the Secrets Under the Repo only with These Variables
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }} #--> Define Region of the AWS-CLI
      # Step 3: Install Terraform
      - name: Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      # Step 5: Initialize Terraform
      - name: Terraform Init
        working-directory: terraform
        run: terraform init
      # Zip code
      - name: Zip
        run: zip -j terraform/lambda_function.zip ./*

      # Step 6: Terraform Plan
      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -var-file=test.tfvars

      # Step 7: Terraform Apply
      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -var-file=test.tfvars -auto-approve
